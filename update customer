--update thông tin khách hàng , kiểm tra format sđt, card, birthdate, point, referrer!= id,
--username and password is unique , password is 8 character long, duplicated data input, customer not found
USE bookstore;


DELIMITER //

CREATE PROCEDURE updateCustomer(
    IN customerId VARCHAR(10),
    IN customerName VARCHAR(100),
    IN customerDob DATE,
    IN customerAddress TEXT,
    IN customerPhone VARCHAR(10),
    IN customerCardNumber VARCHAR(15),
    IN customerPoint INT,
    IN customerEmail VARCHAR(100),
    IN customerUsername VARCHAR(20),
    IN customerPassword VARCHAR(20),
    IN customerReferrer VARCHAR(10)
)
BEGIN
    DECLARE existingCustomerId VARCHAR(10);
    DECLARE existingCustomerEmail VARCHAR(100);
    DECLARE existingCustomerPhone VARCHAR(10);
    DECLARE existingCustomerCardNumber VARCHAR(15);
    DECLARE existingCustomerUsername VARCHAR(20);

    -- Check email format and uniqueness
    IF NOT (customerEmail REGEXP '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,4}$') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid email format';
    END IF;

    -- Check phone format (Vietnam) and uniqueness
    IF NOT (customerPhone REGEXP '^[0-9]+$') THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid phone number format';
    END IF;

    -- Check birthdate
    IF customerDob > CURRENT_DATE THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid date of birth';
    END IF;

    -- Check if the referrer is not the same as the customer id
    IF customerReferrer = customerId THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Referrer cannot be the same as customer id';
    END IF;
 IF customerPoint < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Point must be greater than 0';
    END IF;
    -- Check password length and uniqueness
    IF LENGTH(customerPassword) <= 8 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Password must be more than 8 characters long';
    END IF;

    -- Check card number length and uniqueness
    IF LENGTH(customerCardNumber) <> 15 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Invalid card number length';
    END IF;

    -- Check username uniqueness
    IF (SELECT COUNT(*) FROM customer WHERE username = customerUsername AND id != customerId) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Username already exists';
    END IF;

    -- Check email uniqueness
    IF (SELECT COUNT(*) FROM customer WHERE email = customerEmail AND id != customerId) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Email already exists';
    END IF;

    -- Check phone uniqueness
    IF (SELECT COUNT(*) FROM customer WHERE phone = customerPhone AND id != customerId) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Phone number already exists';
    END IF;

    -- Check card number uniqueness
    IF (SELECT COUNT(*) FROM customer WHERE cardNumber = customerCardNumber AND id != customerId) > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Card number already exists';
    END IF;

    -- Check if the new data is the same as the existing data
    SELECT id, email, phone, cardNumber, username
    INTO existingCustomerId, existingCustomerEmail, existingCustomerPhone, existingCustomerCardNumber, existingCustomerUsername
    FROM customer
    WHERE id = customerId;

    IF (
        existingCustomerId = customerId
        AND existingCustomerEmail = customerEmail
        AND existingCustomerPhone = customerPhone
        AND existingCustomerCardNumber = customerCardNumber
        AND existingCustomerUsername = customerUsername
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'No changes detected.';

    ELSE
        -- Update customer data
        UPDATE customer
        SET
            name = customerName,
            dob = customerDob,
            address = customerAddress,
            phone = customerPhone,
            cardNumber = customerCardNumber,
            point = customerPoint,
            email = customerEmail,
            username = customerUsername,
            password = customerPassword,
            referrer = customerReferrer
        WHERE id = customerId;

        SELECT 'Customer updated successfully' AS result;
    END IF;
END //

DELIMITER ;
----------------------
USE bookstore;


CALL updateCustomer(
    'CUSTOMER1',
    'John Doe',
    '2005-05-15',
    '123 Main St, Cityville',
    '4876543210',
    '123456789012345',
    100,
    'john.doe@email.com',
    'john_doe',
    'newpassword123',
    NULL
);

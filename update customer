USE bookstore;
DELIMITER //

CREATE PROCEDURE updateCustomerDataBatch()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE customerID VARCHAR(10);

    -- Declare variables to store customer data outside of the block
    DECLARE newName VARCHAR(100);
    DECLARE newDOB DATE;
    DECLARE newAddress TEXT;
    DECLARE newPhone VARCHAR(10);
    DECLARE newCardNumber VARCHAR(15);
    DECLARE newPoint INT;
    DECLARE newEmail VARCHAR(100);
    DECLARE newUsername VARCHAR(20);
    DECLARE newPassword VARCHAR(20);
    DECLARE newReferrer VARCHAR(10);
    DECLARE newStatus BOOLEAN;

    -- Declare cursors for iterating over customers
    DECLARE customerCursor CURSOR FOR SELECT id FROM customer;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN customerCursor;

    customerLoop: LOOP
        FETCH customerCursor INTO customerID;
        IF done THEN
            LEAVE customerLoop;
        END IF;

        -- Fetch customer data for the current customer
        SELECT
            name, dob, address, phone, cardNumber,
            point, email, username, password, referrer, status
        INTO
            newName, newDOB, newAddress, newPhone, newCardNumber,
            newPoint, newEmail, newUsername, newPassword, newReferrer, newStatus
        FROM customer WHERE id = customerID;

        -- Check if the date of birth is valid
        IF newDOB > CURRENT_DATE THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid date of birth';
        END IF;

        -- Check if the phone number format is valid (example: 0987654321)
        IF LENGTH(newPhone) <> 10 OR NOT newPhone REGEXP '^[0-9]+$' THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid phone number format';
        END IF;

        -- Check if the email format is valid
        IF NOT newEmail REGEXP '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,4}$' THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid email format';
        END IF;

        -- Check if the referrer exists and is not the same as the customer being updated
        IF newReferrer IS NOT NULL AND NOT EXISTS (SELECT * FROM customer WHERE id = newReferrer) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Invalid referrer';
        END IF;

        -- Check if the username is unique
        IF EXISTS (SELECT * FROM customer WHERE username = newUsername AND id <> customerID) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Username must be unique';
        END IF;

        -- Check if the email is unique
        IF EXISTS (SELECT * FROM customer WHERE email = newEmail AND id <> customerID) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Email must be unique';
        END IF;

        -- Check if the cardNumber is unique
        IF EXISTS (SELECT * FROM customer WHERE cardNumber = newCardNumber AND id <> customerID) THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Card Number must be unique';
        END IF;

        -- Your additional validation checks go here for each field...

        -- Update customer data if all checks pass
        UPDATE customer
        SET
            name = newName,
            dob = newDOB,
            address = newAddress,
            phone = newPhone,
            cardNumber = newCardNumber,
            point = newPoint,
            email = newEmail,
            username = newUsername,
            password = newPassword,
            referrer = newReferrer,
            status = newStatus
        WHERE id = customerID;
    END LOOP;

    CLOSE customerCursor;
END //

DELIMITER ;
